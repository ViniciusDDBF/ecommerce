- **useAuth**: Manages user authentication state, including login, logout, token handling, and role-based access (e.g., for admin vs. customer features). Integrates with Redux for global user state persistence across sessions.

- **useCart**: Handles shopping cart operations like adding/removing items, updating quantities, calculating subtotals/totals/taxes, and syncing with Redux store. Useful for persistent cart across pages and devices.

- **useWishlist**: Similar to useCart but for managing a user's wishlist, including adding/removing products and checking if an item is wishlisted. Syncs with Redux for user-specific persistence.

- **useFetch**: A generic hook for making API requests with loading states, error handling, and caching. Can be used for fetching products, categories, or user data.

- **useInfiniteScroll**: Enables lazy loading of product lists or search results as the user scrolls, fetching more data via API when reaching the bottom. Improves performance for large catalogs.

- **useDebounce**: Debounces input changes, ideal for search bars or filter inputs to prevent excessive API calls while typing product queries or applying price ranges.

- **useForm**: Abstracts form handling, validation (e.g., using Yup or Zod schemas), and submission for forms like registration, login, checkout, or review submissions.

- **useQueryParams**: Parses and updates URL query parameters for filters (e.g., category, price range, sort order) in product listings, ensuring bookmarkable and shareable URLs.

- **usePagination**: Manages paginated data fetching for product grids or lists, handling page changes, total pages, and API offsets/limits.

- **useClickOutside**: Detects clicks outside a component to close modals, dropdowns (e.g., cart preview, menu), or popovers in the UI.

- **useLocalStorage**: Persists data like cart or wishlist items in local storage for guest users, with fallback to Redux for logged-in users.

- **useNotification**: Manages toast or alert notifications for actions like "Item added to cart," errors, or success messages, with auto-dismiss and positioning.

- **useMediaQuery**: Detects screen sizes or breakpoints for responsive logic beyond Tailwind, such as conditionally loading mobile-specific carousels or layouts.

- **useGeolocation**: Retrieves user's location (with permission) for features like estimating shipping costs, suggesting nearby stores, or localizing product recommendations.

- **useCurrency**: Handles currency conversion, formatting, and switching based on user preference or location, integrating with product prices and totals.

- **useCountdown**: Runs timers for flash sales, limited-time offers, or auction endings, updating in real-time for product detail pages.

- **usePrevious**: Tracks previous values of props or state (e.g., for comparing cart quantities to trigger animations or updates).

- **useProductDetails**: Fetches and caches details for a single product by ID, including variants, reviews, and related items, with loading/error states.

- **useCategoryTree**: Builds and manages a hierarchical category structure from API data, useful for navigation menus or sidebar filters.

- **useReview**: Handles fetching, submitting, and paginating product reviews, including rating calculations and user-specific review checks.

- **useOrderHistory**: Fetches and manages a user's past orders, with filtering by status (e.g., shipped, pending) and detail expansion.

- **useShippingCalculator**: Computes shipping options and costs based on cart contents, user address, and API integration.

- **usePayment**: Abstracts payment gateway interactions (e.g., Stripe, PayPal) for checkout, handling tokenization and status updates.

- **useSearch**: Manages global search functionality, including autocomplete suggestions, result fetching, and integration with debounce for efficiency.

- **useFilter**: Manages multi-facet filters (e.g., size, color, brand) for product listings, updating Redux state and triggering refetches.

- **useAnalytics**: Tracks user interactions like product views, add-to-cart events, or page loads for integration with analytics tools, without blocking UI.

- **useThemeSwitcher**: Toggles between light/dark modes or custom themes, storing preference in local storage and applying Tailwind classes.

- **useBreakpoint**: Similar to useMediaQuery but specifically for Tailwind breakpoints, to conditionally render e-commerce elements like mobile carts.

- **useInterval**: Sets up recurring tasks, such as polling for order status updates or live inventory checks during high-traffic sales.

- **useVisibility**: Detects when elements (e.g., product images) enter the viewport for lazy loading or triggering animations in listings.

- **useErrorBoundary**: Catches and handles errors in child components, logging them and showing fallback UI, reusable across error-prone sections like checkout.

- **useProductRecommendations**: Fetches personalized or related product recommendations based on user behavior, cart contents, or browsing history. Integrates with an API or recommendation engine and caches results for performance.

- **useInventoryCheck**: Verifies real-time stock availability for products or variants, useful during add-to-cart or checkout to prevent overselling. Syncs with Redux for global state.

- **usePromoCode**: Manages promo code input, validation, and application to the cart, handling API calls to verify codes and updating totals in Redux.

- **useCheckoutFlow**: Controls the multi-step checkout process (e.g., shipping, payment, review), managing state transitions, validation, and progress persistence.

- **useCompareProducts**: Allows users to add products to a comparison list, storing selections in Redux or local storage and fetching comparison data for display.

- **useRecentlyViewed**: Tracks and retrieves recently viewed products, storing them in local storage or Redux for guest/logged-in users, and displaying them on home or product pages.

- **useDynamicPricing**: Handles dynamic pricing logic, such as tiered discounts, bulk pricing, or location-based price adjustments, integrating with cart state.

- **useProductVariant**: Manages product variant selection (e.g., size, color) and updates UI, price, and availability based on user choices, with Redux for state consistency.

- **useSessionTimeout**: Tracks user inactivity to trigger session expiration warnings, especially for secure areas like checkout or account settings, with auto-logout functionality.

- **useLiveChat**: Integrates with live chat services (e.g., Intercom, Zendesk) to toggle chat widgets or track user interactions, reusable across support-heavy pages.
